// Code generated by sqlc. DO NOT EDIT.
// source: offer.sql

package db

import (
	"context"
	"time"
)

const createOffer = `-- name: CreateOffer :one
INSERT INTO offers (
  user_id, nft_id, usd_price, quantity, floor_difference, expiration, token
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, nft_id, quantity, usd_price, token, floor_difference, expiration, created_at, updated_at
`

type CreateOfferParams struct {
	UserID          int64     `json:"user_id"`
	NftID           int64     `json:"nft_id"`
	UsdPrice        float64   `json:"usd_price"`
	Quantity        float64   `json:"quantity"`
	FloorDifference string    `json:"floor_difference"`
	Expiration      time.Time `json:"expiration"`
	Token           string    `json:"token"`
}

func (q *Queries) CreateOffer(ctx context.Context, arg CreateOfferParams) (Offer, error) {
	row := q.db.QueryRowContext(ctx, createOffer,
		arg.UserID,
		arg.NftID,
		arg.UsdPrice,
		arg.Quantity,
		arg.FloorDifference,
		arg.Expiration,
		arg.Token,
	)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NftID,
		&i.Quantity,
		&i.UsdPrice,
		&i.Token,
		&i.FloorDifference,
		&i.Expiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOffer = `-- name: DeleteOffer :exec
DELETE FROM offers
WHERE id = $1
`

func (q *Queries) DeleteOffer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOffer, id)
	return err
}

const getOffer = `-- name: GetOffer :one
SELECT id, user_id, nft_id, quantity, usd_price, token, floor_difference, expiration, created_at, updated_at FROM offers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOffer(ctx context.Context, id int64) (Offer, error) {
	row := q.db.QueryRowContext(ctx, getOffer, id)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NftID,
		&i.Quantity,
		&i.UsdPrice,
		&i.Token,
		&i.FloorDifference,
		&i.Expiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalOffer = `-- name: GetTotalOffer :one
SELECT count(*) FROM offers
`

func (q *Queries) GetTotalOffer(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalOffer)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listOffers = `-- name: ListOffers :many
SELECT id, user_id, nft_id, quantity, usd_price, token, floor_difference, expiration, created_at, updated_at FROM offers
ORDER BY updated_at
LIMIT $1
OFFSET $2
`

type ListOffersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOffers(ctx context.Context, arg ListOffersParams) ([]Offer, error) {
	rows, err := q.db.QueryContext(ctx, listOffers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Offer{}
	for rows.Next() {
		var i Offer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NftID,
			&i.Quantity,
			&i.UsdPrice,
			&i.Token,
			&i.FloorDifference,
			&i.Expiration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffer = `-- name: UpdateOffer :exec
UPDATE offers
SET usd_price = $2, quantity = $3, floor_difference = $4, expiration = $5
WHERE id = $1
`

type UpdateOfferParams struct {
	ID              int64     `json:"id"`
	UsdPrice        float64   `json:"usd_price"`
	Quantity        float64   `json:"quantity"`
	FloorDifference string    `json:"floor_difference"`
	Expiration      time.Time `json:"expiration"`
}

func (q *Queries) UpdateOffer(ctx context.Context, arg UpdateOfferParams) error {
	_, err := q.db.ExecContext(ctx, updateOffer,
		arg.ID,
		arg.UsdPrice,
		arg.Quantity,
		arg.FloorDifference,
		arg.Expiration,
	)
	return err
}
