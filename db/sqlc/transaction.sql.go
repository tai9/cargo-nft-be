// Code generated by sqlc. DO NOT EDIT.
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  nft_id, event, token, quantity,
  from_user_id, to_user_id, transaction_hash
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, nft_id, event, token, quantity, from_user_id, to_user_id, transaction_hash, created_at, updated_at
`

type CreateTransactionParams struct {
	NftID           int64   `json:"nft_id"`
	Event           string  `json:"event"`
	Token           string  `json:"token"`
	Quantity        float64 `json:"quantity"`
	FromUserID      int64   `json:"from_user_id"`
	ToUserID        int64   `json:"to_user_id"`
	TransactionHash string  `json:"transaction_hash"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.NftID,
		arg.Event,
		arg.Token,
		arg.Quantity,
		arg.FromUserID,
		arg.ToUserID,
		arg.TransactionHash,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.NftID,
		&i.Event,
		&i.Token,
		&i.Quantity,
		&i.FromUserID,
		&i.ToUserID,
		&i.TransactionHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTotalTransaction = `-- name: GetTotalTransaction :one
SELECT count(*) FROM transactions
`

func (q *Queries) GetTotalTransaction(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalTransaction)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, nft_id, event, token, quantity, from_user_id, to_user_id, transaction_hash, created_at, updated_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.NftID,
		&i.Event,
		&i.Token,
		&i.Quantity,
		&i.FromUserID,
		&i.ToUserID,
		&i.TransactionHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, nft_id, event, token, quantity, from_user_id, to_user_id, transaction_hash, created_at, updated_at FROM transactions
ORDER BY updated_at
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.NftID,
			&i.Event,
			&i.Token,
			&i.Quantity,
			&i.FromUserID,
			&i.ToUserID,
			&i.TransactionHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
