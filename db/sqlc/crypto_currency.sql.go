// Code generated by sqlc. DO NOT EDIT.
// source: crypto_currency.sql

package db

import (
	"context"
)

const createCryptoCurrency = `-- name: CreateCryptoCurrency :one
INSERT INTO crypto_currencies (
  name, code, price
) VALUES (
  $1, $2, $3
)
RETURNING id, name, code, price, created_at, updated_at
`

type CreateCryptoCurrencyParams struct {
	Name  string  `json:"name"`
	Code  string  `json:"code"`
	Price float64 `json:"price"`
}

func (q *Queries) CreateCryptoCurrency(ctx context.Context, arg CreateCryptoCurrencyParams) (CryptoCurrency, error) {
	row := q.db.QueryRowContext(ctx, createCryptoCurrency, arg.Name, arg.Code, arg.Price)
	var i CryptoCurrency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCryptoCurrency = `-- name: DeleteCryptoCurrency :exec
DELETE FROM crypto_currencies
WHERE code = $1
`

func (q *Queries) DeleteCryptoCurrency(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteCryptoCurrency, code)
	return err
}

const getCryptoCurrency = `-- name: GetCryptoCurrency :one
SELECT id, name, code, price, created_at, updated_at FROM crypto_currencies
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetCryptoCurrency(ctx context.Context, code string) (CryptoCurrency, error) {
	row := q.db.QueryRowContext(ctx, getCryptoCurrency, code)
	var i CryptoCurrency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalCryptoCurrency = `-- name: GetTotalCryptoCurrency :one
SELECT count(*) FROM crypto_currencies
`

func (q *Queries) GetTotalCryptoCurrency(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalCryptoCurrency)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listCryptoCurrencies = `-- name: ListCryptoCurrencies :many
SELECT id, name, code, price, created_at, updated_at FROM crypto_currencies
ORDER BY updated_at
LIMIT $1
OFFSET $2
`

type ListCryptoCurrenciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCryptoCurrencies(ctx context.Context, arg ListCryptoCurrenciesParams) ([]CryptoCurrency, error) {
	rows, err := q.db.QueryContext(ctx, listCryptoCurrencies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CryptoCurrency{}
	for rows.Next() {
		var i CryptoCurrency
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCryptoCurrency = `-- name: UpdateCryptoCurrency :exec
UPDATE crypto_currencies
SET name = $2, code = $3, price = $4
WHERE code = $1
`

type UpdateCryptoCurrencyParams struct {
	Code   string  `json:"code"`
	Name   string  `json:"name"`
	Code_2 string  `json:"code_2"`
	Price  float64 `json:"price"`
}

func (q *Queries) UpdateCryptoCurrency(ctx context.Context, arg UpdateCryptoCurrencyParams) error {
	_, err := q.db.ExecContext(ctx, updateCryptoCurrency,
		arg.Code,
		arg.Name,
		arg.Code_2,
		arg.Price,
	)
	return err
}
